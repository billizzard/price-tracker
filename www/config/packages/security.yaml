security:
    encoders:
        # Our user class and the algorithm we'll use to encode passwords
        # https://symfony.com/doc/current/security.html#c-encoding-the-user-s-password
        App\Entity\User:
            algorithm: bcrypt
            cost: 12

    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
            # https://symfony.com/doc/current/security.html#b-configuring-how-users-are-loaded
            # In this example, users are stored via Doctrine in the database
            # To see the users at src/App/DataFixtures/ORM/LoadFixtures.php
            # To load users from somewhere else: https://symfony.com/doc/current/security/custom_provider.html
            database_users:
                entity:
                    class: App\Entity\User
                    #property: email
                    #property: email

    firewalls:

#        login:
#            pattern:  ^/api/login
#            stateless: true
#            anonymous: true
#            form_login:
#                check_path:               /api/login_check
#                success_handler:          lexik_jwt_authentication.handler.authentication_success
#                failure_handler:          lexik_jwt_authentication.handler.authentication_failure
#                require_previous_session: false

        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            anonymous: true

            form_login:
                # The route name that the login form submits to
                check_path: security_login
                failure_handler: security.custom_auth_failure_handler
                success_handler: security.custom_auth_success_handler
                # The name of the route where the login form lives
                # When the user tries to access a protected page, they are redirected here
                login_path: security_login
                default_target_path: tracker_list
                # Secure the login form against CSRF
                # Reference: https://symfony.com/doc/current/security/csrf_in_login_form.html
                csrf_token_generator: security.csrf.token_manager
                # The page users are redirect to when there is no previous page stored in the
                # session (for example when the users access directly to the login page).
                #default_target_path: blog_index

            # Управляет выходом пользователя
            logout:
                # Адрес страницы
                path: security_logout
                # Адрес старницы для редиректа после логаута
                target: homepage

            # activate different ways to authenticate

            # http_basic: ~
            # https://symfony.com/doc/current/security.html#a-configuring-how-your-users-will-authenticate

            # form_login: ~
            # https://symfony.com/doc/current/security/form_login_setup.html

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # this is a catch-all for the admin area
        # additional security lives in the controllers
        - { path: '^/(%app.locales%)/profile/hosts', roles: [ROLE_ADMIN] }
        - { path: '^/(%app.locales%)/profile/errors', roles: [ROLE_ADMIN] }
        - { path: '^/(%app.locales%)/profile', roles: [ROLE_USER]}

    # задаю иерархию ролей
    role_hierarchy:
        ROLE_ADMIN: [ROLE_USER]
        #ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]
