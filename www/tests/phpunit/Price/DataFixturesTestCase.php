<?php
namespace App\Tests\phpunit\Price;

use App\Entity\Host;
use App\Entity\Product;
use App\Entity\User;
use App\Entity\Watcher;
use App\Kernel;
use App\Repository\WatcherRepository;
use Doctrine\ORM\EntityManager;
use Symfony\Bundle\FrameworkBundle\Test\KernelTestCase;
use Symfony\Bundle\FrameworkBundle\Test\WebTestCase;


class DataFixturesTestCase extends WebTestCase
{
    /** @var EntityManager entityManager */
    protected static $entityManager;
    protected static $entities = ['user', 'product', 'host', 'watcher'];

    public static function getKernelClass()
    {
        return Kernel::class;
    }

    public static function setUpBeforeClass()
    {
        self::$kernel = self::bootKernel();
        self::$entityManager = self::$kernel->getContainer()->get('doctrine')->getManager();
        self::loadFixtures();
        parent::setUpBeforeClass();
    }

    private static function loadFixtures()
    {
        $user = new User();
        $user->setEmail('test@test.com');
        $user->setRoles('ROLE_USER');
        $user->setPassword('$2y$12$A1comgHtNSnZwjz09PIWhuD2DOt2iV8rwG74pZ9t9apQzkwdpYByC');
        $user->setNickName('User_Test');
        self::$entityManager->persist($user);
        self::$entityManager->flush();

        $host = new Host();
        $host->setHost('catalog.onliner.by');
        self::$entityManager->persist($host);
        self::$entityManager->flush();

        $product = new Product();
        $product->setHost($host);
        $product->setUrl('https://catalog.onliner.by/memcards/samsung/mbmc64ga');
        self::$entityManager->persist($product);
        self::$entityManager->flush();

        $watcher = new Watcher();
        $watcher->setUser($user);
        $watcher->setProduct($product);
        $watcher->setTitle('Onliner');
        $watcher->setStartPrice(55);
        $watcher->setPercent(10);
        $watcher->setStatus(Watcher::STATUS_NEW);

        self::$entities = [
            'user' => $user,
            'product' => $product,
            'host' => $host,
            'watcher' => $watcher,
        ];

        self::$entityManager->persist($watcher);
        self::$entityManager->flush();

    }

    public static function tearDownAfterClass()
    {
        $sql = 'DELETE FROM watcher; DELETE FROM message; DELETE FROM price_tracker; DELETE FROM product; DELETE FROM `host`; DELETE FROM `user`;';
        $stmt = self::$entityManager->getConnection()->prepare($sql);
        $stmt->execute();

        parent::tearDownAfterClass(); // TODO: Change the autogenerated stub
    }
}